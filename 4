#include "iostream"
#include "vector"
#include <list>
#include <queue>
#include "algorithm"


class ListGraph {
private:

    std::vector<std::list<int>> matrix;
    std::vector<int> colours;

public:

    ListGraph(int ver);

    ListGraph(const ListGraph& other);

    void AddEdge(int from, int to);

    int VerticesCount() const;

    void GetNextVertices(int vertex, std::vector<int> &vertices) const;

    void GetPrevVertices(int vertex, std::vector<int> &vertices) const ;

};


void ListGraph::AddEdge(int from, int to) {
    if (std::find(matrix[from].begin(), matrix[from].end(), to) == matrix[from].end()){
        matrix[from].push_back(to);
    }
    if (std::find(matrix[to].begin(), matrix[to].end(), from) == matrix[to].end()){
        matrix[to].push_back(from);
    }
}

int ListGraph::VerticesCount() const {
    return matrix.size();
}

void ListGraph::GetNextVertices(int vertex, std::vector<int> &vertices) const {
    vertices = {matrix[vertex].begin(), matrix[vertex].end()};
}

void ListGraph::GetPrevVertices(int vertex, std::vector<int> &vertices) const {
    for(int i=0; i<matrix.size();i++){
        if (std::find(matrix[i].begin(), matrix[i].end(), vertex) != matrix[i].end()){
            vertices.push_back(i);
        }
    }
}

ListGraph::ListGraph(int ver) : matrix(ver) , colours(ver, 0){}

ListGraph::ListGraph(const ListGraph &other) : matrix(other.matrix) {}


bool check(ListGraph* G, int a) {
    bool flg=true;
    std::vector<int> colour(G->VerticesCount(), 0);
    std::queue<int> q;
    q.push(a);
    colour[a]=1;
    while(!q.empty()&&flg) {
        int curr = q.front();
        std::vector<int> next;
        G->GetNextVertices(curr, next);
        q.pop();

        for (int i = 0; i < next.size(); i++) {
            int n = next[i];
            if(colour[n]==0) {
                colour[n] = colour[curr] * (-1);
                q.push(n);
            }
            if(colour[n]==colour[curr]) flg=false;
        }
    }

    return flg;
}



bool solve(int n, int v, int* in){
    ListGraph G=ListGraph(n);
    for(int i=0;i<v;i++){
        G.AddEdge(in[2*i], in[2*i+1]);
    }

    return check(&G, 0);
}

int main() {
    int n;
    int v;
    std::cin >> n;
    std::cin >> v;
    int* in = new int[2*v];
    for(int i=0;i<v;i++){
        std::cin >> in[2*i] >> in[2*i+1];
    }

    if(solve(n, v, in)){
        std::cout <<"YES";
    }else{
        std::cout <<"NO";
    }



    delete [] in;
    return 0;
}
